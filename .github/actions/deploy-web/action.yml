name: Deploy Web services
description: Deploy Web services

inputs:
  AWS_KEY_ID:
    description: AWS key ID
    required: true
    default: ''
  AWS_ACCESS_KEY:
    description: AWS access key
    required: true
    default: ''
  AUTH_API_BASE_URL:
    description: Auth Service based URL
    required: true
    default: http://localhost:3300/api/auth
  CENTRAL_API_BASE_URL:
    description: Central Service based URL
    required: true
    default: http://localhost:4400/api/central
  PAYMENT_API_BASE_URL:
    description: Payment Service based URL
    required: true
    default: http://localhost:5500/api/payment
  NOTIFICATION_API_BASE_URL:
    description: Notification Service based URL
    required: true
    default: http://localhost:6600/api/notification
  NOTIFICATION_URL:
    description: Notification Service URL
    required: true
    default: http://localhost:6600
  CORPORATE_WEB_BASE_URL:
    description: CORPORATE_WEB_BASE_URL
    required: true
    default: https://dev-register.seasiacenter.com
  CDN_BASE_URL:
    description: Next CDN URL
    required: true
    default: https://dev-central-cdn.seasiacenter.com/
  NEXT_PUBLIC_HIDE_V2_FEATURE:
    description: Flag for hiding V2 feature
    required: false
    default: 'false'
  SENTRY_ENVIRONMENT_NAME:
    description: Sentry Environment Name
    required: true
    default: local
  SENTRY_DSN:
    description: Sentry DSN
    required: true
    default: ''
  SENTRY_ORG:
    description: Sentry DSN
    required: true
    default: ''
  SENTRY_PROJECT:
    description: Sentry DSN
    required: true
    default: ''
  SENTRY_AUTH_TOKEN:
    description: Sentry DSN
    required: true
    default: ''
  RECAPTCHA_SITE_KEY:
    description: NEXT_PUBLIC_RECAPTCHA_SITE_KEY
    required: true
    default: ''
  ECS_CLUSTER:
    description: ECS_CLUSTER
    required: true
    default: ''
  ECS_SERVICES:
    description: ECS_SERVICES
    required: true
    default: ''
  ECS_CONTAINER:
    description: ECS_CONTAINER
    required: true
    default: ''
  ECR_REPOSITORY:
    description: ECR_REPOSITORY
    required: true
    default: ''
  DISABLE_DOCKER_CACHE:
    description: ECR_REPOSITORY
    required: true
    default: 'false'

outputs:
  ecs-cluster:
    description: ECS_CLUSTER
    value: ${{ steps.ecs.outputs.cluster }}
  ecs-services:
    description: ECS_SERVICES
    value: ${{ steps.ecs.outputs.services }}

runs:
  using: composite
  steps:
    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: 'Login to Amazon ECR'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Login to ECR
      uses: docker/login-action@v1
      with:
        registry: ${{ steps.login-ecr.outputs.registry }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3.0.2
      with:
        path: /tmp/.buildx-cache-*
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push
      uses: docker/build-push-action@v2.10.0
      env:
        PROD_IMAGE_TAG: ${{ github.sha }}
      with:
        context: .
        file: packages/web/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ env.PROD_IMAGE_TAG }}
        cache-from: type=local,src=/tmp/.buildx-cache-web
        cache-to: type=local,dest=/tmp/.buildx-cache-web-new,mode=max
        no-cache: ${{ inputs.DISABLE_DOCKER_CACHE }}
        build-args: |
          AUTH_API_BASE_URL=${{ inputs.AUTH_API_BASE_URL }}
          CENTRAL_API_BASE_URL=${{ inputs.CENTRAL_API_BASE_URL }}
          PAYMENT_API_BASE_URL=${{ inputs.PAYMENT_API_BASE_URL }}
          CORPORATE_WEB_BASE_URL=${{ inputs.CORPORATE_WEB_BASE_URL }}
          CDN_BASE_URL=${{ inputs.CDN_BASE_URL }}
          SENTRY_DSN=${{ inputs.SENTRY_DSN }}
          SENTRY_ORG=${{ inputs.SENTRY_ORG }}
          SENTRY_PROJECT=${{ inputs.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN=${{ inputs.SENTRY_AUTH_TOKEN }}
          SENTRY_RELEASE=${{ github.sha }}
          SENTRY_ENVIRONMENT_NAME=${{ inputs.SENTRY_ENVIRONMENT_NAME }}
          RECAPTCHA_SITE_KEY=${{ inputs.RECAPTCHA_SITE_KEY }}
          NOTIFICATION_URL=${{ inputs.NOTIFICATION_URL }}
          NOTIFICATION_API_BASE_URL=${{ inputs.NOTIFICATION_API_BASE_URL }}
          NEXT_PUBLIC_HIDE_V2_FEATURE=${{ inputs.NEXT_PUBLIC_HIDE_V2_FEATURE }}

    - name: Get task definitions
      shell: bash
      id: get-task-definitions
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ inputs.ECS_SERVICES }} \
          --query taskDefinition > web-task-definition.json

    - name: Fill in the new image ID in the Web task definition
      id: fill-web-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        PROD_IMAGE_TAG: ${{ github.sha }}
      with:
        task-definition: web-task-definition.json
        container-name: ${{ inputs.ECS_CONTAINER }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ env.PROD_IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.fill-web-task-definition.outputs.task-definition }}
        service: ${{ inputs.ECS_SERVICES }}
        cluster: ${{ inputs.ECS_CLUSTER }}
        wait-for-service-stability: false

    - name: Output ECS variables
      shell: bash
      id: ecs
      env:
        ECS_SERVICES: ${{ inputs.ECS_SERVICES }}
        ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
      run: |
        echo "::set-output name=cluster::$ECS_CLUSTER"
        echo "::set-output name=services::$ECS_SERVICES"

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move docker cache workaround
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache-web
        mv /tmp/.buildx-cache-web-new /tmp/.buildx-cache-web
