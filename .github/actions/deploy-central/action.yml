name: Deploy Central services
description: Deploy Central services

inputs:
  AWS_KEY_ID:
    description: AWS key ID
    required: true
  AWS_ACCESS_KEY:
    description: AWS access key
    required: true
  ECS_CLUSTER:
    description: ECS_CLUSTER
    required: true
  CORE_ECS_SERVICES:
    description: ECS_SERVICES
    required: true
  CORE_ECS_CONTAINER:
    description: ECS_CONTAINER
    required: true
  CORE_ECR_REPOSITORY:
    description: ECR_REPOSITORY
    required: true
  CENTRAL_ECS_SERVICES:
    description: ECS_SERVICES
    required: true
  CENTRAL_ECS_CONTAINER:
    description: ECS_CONTAINER
    required: true
  CENTRAL_ECR_REPOSITORY:
    description: ECR_REPOSITORY
    required: true
  SUBNET_PRIMARY:
    description: SUBNET_PRIMARY
    required: true
  SUBNET_SECONDARY:
    description: SUBNET_SECONDARY
    required: true
  SG_TASK:
    description: SG_TASK
    required: true
  SG_DB_ACCESS:
    description: SG_DB_ACCESS
    required: true
  DISABLE_DOCKER_CACHE:
    description: DISABLE_DOCKER_CACHE
    required: true
    default: 'false'

runs:
  using: composite
  steps:
    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: 'Login to Amazon ECR'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker Login to ECR
      uses: docker/login-action@v1
      with:
        registry: ${{ steps.login-ecr.outputs.registry }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3.0.2
      with:
        path: /tmp/.buildx-cache-*
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build core and push to ECR
      uses: docker/build-push-action@v2.10.0
      env:
        PROD_IMAGE_TAG: ${{ github.sha }}
      with:
        context: .
        file: packages/core/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.CORE_ECR_REPOSITORY }}:${{ env.PROD_IMAGE_TAG }}
        cache-from: type=local,src=/tmp/.buildx-cache-core
        cache-to: type=local,dest=/tmp/.buildx-cache-core-new,mode=max
        no-cache: ${{ inputs.DISABLE_DOCKER_CACHE }}

    - name: Get core task definitions
      shell: bash
      id: get-core-task-definitions
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ inputs.CORE_ECS_SERVICES }} \
          --query taskDefinition > core-task-definition.json

    - name: Fill in the new image ID in the Core task definition
      id: fill-core-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        PROD_IMAGE_TAG: ${{ github.sha }}
      with:
        task-definition: core-task-definition.json
        container-name: ${{ inputs.CORE_ECS_CONTAINER }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.CORE_ECR_REPOSITORY }}:${{ env.PROD_IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition for core
      id: deploy-core-td
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.fill-core-task-definition.outputs.task-definition }}
        cluster: ${{ inputs.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run migrations
      shell: bash
      id: migration
      env:
        ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
        ECS_TASK_DEFINITION: ${{ steps.deploy-core-td.outputs.task-definition-arn }}
        SUBNET_PRIMARY: ${{ inputs.SUBNET_PRIMARY }}
        SUBNET_SECONDARY: ${{ inputs.SUBNET_SECONDARY }}
        SG_TASK: ${{ inputs.SG_TASK }}
        SG_DB_ACCESS: ${{ inputs.SG_DB_ACCESS }}
      run: |
        # Run custom scripts
        echo "=== RUN CUSTOM SCRIPTS ===="
        RUN_RESULT=$(aws ecs run-task --started-by "${{ github.sha }}-central" \
          --cluster ${ECS_CLUSTER} \
          --task-definition ${ECS_TASK_DEFINITION} \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_PRIMARY}, ${SUBNET_SECONDARY}],securityGroups=[${SG_TASK}, ${SG_DB_ACCESS}],assignPublicIp=ENABLED"})
        echo $RUN_RESULT
        echo ""
        if [[ $(echo $RUN_RESULT | jq '.failures | length' -r) -ne "0" ]]; then echo "task has failures" && exit 1; fi
        ARN=$(echo $RUN_RESULT|jq -r -c '.tasks[].taskArn')
        # Wait script end
        aws ecs wait tasks-stopped --cluster ${ECS_CLUSTER} --tasks "$ARN"
        FINAL_RESULT=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks "$ARN")
        echo "=== SCRIPT RESULT ===="
        echo $FINAL_RESULT
        if [[ $(echo $FINAL_RESULT | jq '.failures | length' -r) -ne "0" ]]; then echo "task has failures" && exit 1; fi
        EXIT_CODE=$(echo $FINAL_RESULT | jq ".tasks[0].containers[0].exitCode|tonumber" -r)
        echo "exit $EXIT_CODE"
        exit $EXIT_CODE

    - name: Build central and push to ECR
      uses: docker/build-push-action@v2.10.0
      env:
        PROD_IMAGE_TAG: ${{ github.sha }}
      with:
        context: .
        file: packages/central/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.CENTRAL_ECR_REPOSITORY }}:${{ env.PROD_IMAGE_TAG }}
        cache-from: type=local,src=/tmp/.buildx-cache-central
        cache-to: type=local,dest=/tmp/.buildx-cache-central-new,mode=max
        no-cache: ${{ inputs.DISABLE_DOCKER_CACHE }}

    - name: Get task definitions
      shell: bash
      id: get-task-definitions
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ inputs.CENTRAL_ECS_SERVICES }} \
          --query taskDefinition > central-api-task-definition.json

    - name: Fill in the new image ID in the Central task definition
      id: fill-central-api-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        PROD_IMAGE_TAG: ${{ github.sha }}
      with:
        task-definition: central-api-task-definition.json
        container-name: ${{ inputs.CENTRAL_ECS_CONTAINER }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.CENTRAL_ECR_REPOSITORY }}:${{ env.PROD_IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      id: deploy-central-td
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.fill-central-api-task-definition.outputs.task-definition }}
        service: ${{ inputs.CENTRAL_ECS_SERVICES }}
        cluster: ${{ inputs.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run Seed Script
      shell: bash
      id: seed
      env:
        ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
        ECS_TASK_DEFINITION: ${{ steps.deploy-central-td.outputs.task-definition-arn }}
        SUBNET_PRIMARY: ${{ inputs.SUBNET_PRIMARY }}
        SUBNET_SECONDARY: ${{ inputs.SUBNET_SECONDARY }}
        SG_TASK: ${{ inputs.SG_TASK }}
        SG_DB_ACCESS: ${{ inputs.SG_DB_ACCESS }}
      run: |
        # Run custom scripts
        echo "=== RUN CUSTOM SCRIPTS ===="
        RUN_RESULT=$(aws ecs run-task --started-by "${{ github.sha }}" \
          --cluster ${ECS_CLUSTER} \
          --task-definition ${ECS_TASK_DEFINITION} \
          --overrides '{"containerOverrides":[{"name": "${{ inputs.CENTRAL_ECS_CONTAINER }}", "command": ["node", "dist/scripts/console", "run-seeds"]}]}' \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_PRIMARY}, ${SUBNET_SECONDARY}],securityGroups=[${SG_TASK}, ${SG_DB_ACCESS}],assignPublicIp=ENABLED"})
        echo $RUN_RESULT
        echo ""
        if [[ $(echo $RUN_RESULT | jq '.failures | length' -r) -ne "0" ]]; then echo "task has failures" && exit 1; fi
        ARN=$(echo $RUN_RESULT|jq -r -c '.tasks[].taskArn')
        # Wait script end
        aws ecs wait tasks-stopped --cluster ${ECS_CLUSTER} --tasks "$ARN"
        FINAL_RESULT=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks "$ARN")
        echo "=== SCRIPT RESULT ===="
        echo $FINAL_RESULT
        if [[ $(echo $FINAL_RESULT | jq '.failures | length' -r) -ne "0" ]]; then echo "task has failures" && exit 1; fi
        EXIT_CODE=$(echo $FINAL_RESULT | jq ".tasks[0].containers[0].exitCode|tonumber" -r)
        echo "exit $EXIT_CODE"
        exit $EXIT_CODE

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move docker cache workaround
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache-core
        rm -rf /tmp/.buildx-cache-central
        mv /tmp/.buildx-cache-core-new /tmp/.buildx-cache-core
        mv /tmp/.buildx-cache-central-new /tmp/.buildx-cache-central
